import 'package:dui/core/external/country_picker.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../dui.dart';
import 'external/custom_text_field.dart';

class DUIInput {
  Widget textField(
      String? label,
      TextEditingController? controller,
      FocusNode focusNode,
      BuildContext context, {
        bool? enabled,
        TextInputType? keyboardType,
        TextCapitalization? textCapitalization,
        bool? obscure,
        TextInputAction? textInputAction,
        FocusNode? nextFocusNode,
        Widget? suffixIcon,
        Widget? prefixIcon,
        Color? colorText,
        bool? expands,
        String? hint,
        Function(String)? onChange,
        Function(String)? onSubmit,
        int? maxLines,
        int? minLines,
        int? maxLength,
        List<TextInputFormatter>? inputFormatters,
        String? error,
        String? helpMessage,
        bool? showPrefixSeparator = false,
        bool? showSuffixSeparator = false,
        Color? bgColor,
      }) {
    return CustomTextField(label, controller, focusNode,
      enabled: enabled,
      keyboardType: keyboardType,
      textCapitalization: textCapitalization,
      obscure: obscure,
      textInputAction: textInputAction,
      nextFocusNode: nextFocusNode,
      suffixIcon: suffixIcon,
      prefixIcon: prefixIcon,
      colorText: colorText,
      expands: expands,
      hint: hint,
      onChange: onChange,
      onSubmit: onSubmit,
      maxLines: maxLines,
      minLines: minLines,
      maxLength: maxLength,
      inputFormatters: inputFormatters,
      error: error,
      helpMessage: helpMessage,
      showPrefixSeparator: showPrefixSeparator,
      showSuffixSeparator: showSuffixSeparator,
      bgColor: bgColor,
    );
  }

  Widget smallTextField(
      TextEditingController? controller,
      FocusNode focusNode,
      BuildContext context, {
        bool? enabled,
        TextInputType? keyboardType,
        TextCapitalization? textCapitalization,
        bool? obscure,
        TextInputAction? textInputAction,
        FocusNode? nextFocusNode,
        Widget? suffixIcon,
        Widget? prefixIcon,
        Color? colorText,
        bool? expands,
        String? hint,
        Function([String value])? onChange,
        Function(String)? onSubmit,
        int? maxLines,
        int? minLines,
        int? maxLength,
        List<TextInputFormatter>? inputFormatters,
        String? error,
        String? helpMessage,
        bool? showPrefixSeparator = false,
        bool? showSuffixSeparator = false,
        String? label,
        Color? bgColor,
      }) {
    return CustomTextField(label, controller, focusNode,
      enabled: enabled,
      keyboardType: keyboardType,
      textCapitalization: textCapitalization,
      obscure: obscure,
      textInputAction: textInputAction,
      nextFocusNode: nextFocusNode,
      suffixIcon: suffixIcon,
      prefixIcon: prefixIcon,
      colorText: colorText,
      expands: expands,
      onChange: onChange,
      onSubmit: onSubmit,
      minLines: minLines,
      maxLines: maxLength,
      maxLength: maxLength,
      inputFormatters: inputFormatters,
      error: error,
      helpMessage: helpMessage,
      showPrefixSeparator: showPrefixSeparator,
      showSuffixSeparator: showSuffixSeparator,
      isSmall: true,
      bgColor: bgColor,
    );
  }

  Widget searchField(
      String? label,
      TextEditingController? controller,
      FocusNode focusNode,
      BuildContext context, {
        TextInputType? keyboardType,
        TextCapitalization? textCapitalization,
        TextInputAction? textInputAction,
        FocusNode? nextFocusNode,
        Color? colorText,
        Color? bgColor,
        bool? expands,
        String? hint,
        Function(String)? onChange,
        Function(String)? onSubmit,
        int? maxLines,
        Widget? suffixIcon,
        int? minLines,
        List<TextInputFormatter>? inputFormatters,
        bool loading = false,
        bool enabled = true,
        bool? ignorePointer = false,
        bool? showPrefixSeparator = false,
        bool? showSuffixSeparator = false,
      }) {
    return CustomTextField(label, controller, focusNode,
      enabled: enabled,
      keyboardType: keyboardType,
      textCapitalization: textCapitalization,
      textInputAction: textInputAction,
      nextFocusNode: nextFocusNode,
      suffixIcon: suffixIcon,
      prefixIcon: Icon(Icons.search, color: colorText,),
      colorText: colorText,
      expands: expands,
      hint: hint,
      onChange: onChange,
      onSubmit: onSubmit,
      maxLines: maxLines,
      minLines: minLines,
      inputFormatters: inputFormatters,
      borderColor: Colors.transparent,
      bgColor: bgColor ?? Theme.of(context).inputDecorationTheme.fillColor,
      loading: loading,
      ignorePointer: ignorePointer,
      showPrefixSeparator: showPrefixSeparator,
      showSuffixSeparator: showSuffixSeparator,
    );
  }

  Widget chatInputField(BuildContext context, String? label,
      TextEditingController? controller, FocusNode focusNode,
      {Function(String)? onSubmit, double? height, bool? enabled}) {
    return DUI.input.smallTextField(controller, focusNode, context,
        onSubmit: onSubmit,
        enabled: enabled,
        maxLines: 3,
        minLines: 1,
        label: label);
  }

  Widget phoneTextField(
      BuildContext context,
      String? label,
      TextEditingController? controller,
      FocusNode focusNode,
      String initialPhonePrefix,
      Function(String) onPrefixChange,
      {bool isEnabled = true,
        Widget? trailing,
        Function(String)? onChange,
        Color? bgColor}) {
    return CustomTextField(label, controller, focusNode,
      enabled: isEnabled,
      suffixIcon: trailing ?? const SizedBox.shrink(),
      prefixIcon: CountryPicker(
        initialSelection: initialPhonePrefix,
        favorite: const ['+376', '+34', '+33', '+351'],
        onChanged: (country) {
          onPrefixChange(country!.countryCode ?? '');
        },
      ),
      showPrefixSeparator: true,
      inputFormatters: <TextInputFormatter>[
        LengthLimitingTextInputFormatter(12),
      ],
      keyboardType: TextInputType.phone,
      onChange: onChange,
      bgColor: bgColor,);
  }
}
